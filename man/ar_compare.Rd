% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compare.R
\name{ar_compare}
\alias{ar_compare}
\title{Compare responses}
\usage{
ar_compare(associations, participant_vars, target_var, fun = "count", ...)
}
\arguments{
\item{associations}{an \code{associatoR} object containing association data as generated by \link[associatoR]{ar_import} with targets defined by \link[associatoR]{ar_set_targets}.}

\item{participant_vars}{a \code{character} vector specifying the grouping variables.}

\item{target_var}{an optional \code{character} string specifying the target variable to be summarized. If not specified \code{ar_comapre} tabulates the frequencies of targets.}

\item{fun}{a \code{character} string of "count" to return counts or a function specifying the statistic to calculate from \code{target_var}, e.g. mean, sd, etc.}

\item{...}{additional arguments passed on to fun}
}
\value{
Returns a \link[tibble]{tibble} containing grouped summaries (counts, or other custom statistics).
}
\description{
\code{ar_compare} compares responses across participant variables by returning summary statistics.
}
\examples{
# calculate counts by using fun = "count"
ar_import(intelligence,
          participant = participant_id,
          cue = cue,
          response = response,
          participant_vars = c(gender, education),
          response_vars = c(response_position, response_level)) \%>\%
  ar_set_targets(targets = "cues") \%>\%
  ar_count_targets() \%>\%
  ar_compare(participant_vars = c(gender, education), target_var = frequency, fun = "count")

# calculate means by using fun = mean and passing na.rm argument to mean()
ar_import(intelligence,
          participant = participant_id,
          cue = cue,
          response = response,
          participant_vars = c(gender, education),
          response_vars = c(response_position, response_level)) \%>\%
  ar_set_targets(targets = "cues") \%>\%
  ar_count_targets() \%>\%
  ar_compare(participant_vars = c(gender, education), target_var = frequency, fun = mean, na.rm = TRUE)

# calculate standard deviations by using fun = sd
ar_import(intelligence,
          participant = participant_id,
          cue = cue,
          response = response,
          participant_vars = c(gender, education),
          response_vars = c(response_position, response_level)) \%>\%
  ar_set_targets(targets = "cues") \%>\%
  ar_count_targets() \%>\%
  ar_compare(participant_vars = c(gender, education), target_var = frequency, fun = sd, na.rm = TRUE)

}
